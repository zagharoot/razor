syntax = "proto2";

option java_package = "com.razorski.razor";
option java_multiple_files = true;

// Note: The proto definitions on the arduino side are compiled using 'required' tag because
//       nanopb didn't support 'optional'.
//
// Note: DO NOT use double in the proto definitions because it's not supported fully in arduino.
//       Instead, use float.

// Data collected from the IMU hardware.
// This includes accelerometer, gyro, and temperature data.
message IMUData {
    // Acceleration data in millig's.
    optional int32 ax = 1;
    optional int32 ay = 2;
    optional int32 az = 3;

    // Magnetic data in degrees/sec.
    optional int32 gx = 4;
    optional int32 gy = 5;
    optional int32 gz = 6;

    // Space location data in degrees.
    optional float yaw = 7;
    optional float pitch = 8;
    optional float roll = 9;

    // Temperature data in Celsius.
    optional int32 temperature = 10;
}

// All the sensors coming from one foot.
message FootSensorData {
    optional IMUData imu_data = 1;
    // Value of the pressure sensor [0, 1024].
    // The higher the value, the more pressure on the sensor.
    optional int32 pressure_front = 2;
}

// Location data provided by GPS.
// This mimics the @code{Location} class.
message LocationData {
    // Latitude, in degrees.
    optional double latitude = 1;
    // Longitude, in degrees.
    optional double longitude = 2;
    // Speed on the ground in meters/second.
    optional float speed = 3;
    // The altitude, in meters above the WGS 84 reference ellipsoid.
    optional double altitude = 4;
    // Estimated accuracy of this location, in meters.
    optional float accuracy = 5;
}

// All the sensor data collected from the phone.
message PhoneData {
    optional LocationData location_data = 1;
}

// All the sensor data.
message SensorData {
    optional FootSensorData left = 1;
    optional FootSensorData right = 2;


    // These tags are reserved for Android-only and will be populated on the phone.
    // Reserved numbers start at 101.
    optional int64 timestamp_msec = 101;
    optional PhoneData phone_data = 102;
}

// A series of sensor data that should be measured together (e.g. a run from top of the hill
// to the bottom.
// This distinction is logical, meaning it is regardless of how many times we record/pause
// data collection in the app.
message RunSession {
    optional int64 start_timestamp_msec = 1;
    optional int64 end_timestamp_msec = 2;

    repeated SensorData sensor_data = 3;
}

// A recording session on the phone. In general, we shouldn't really care about this, because
// ideally we only look at RunSession to group sensor readings together.
// This is just a convinient way to store unsynced/unprocessed data together till we do so.
message RecordSession {
    optional int64 start_timestamp_msec = 1;
    optional int64 end_timestamp_msec = 2;

    repeated SensorData sensor_data = 3;
}
